from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import joblib
import pandas as pd
from datetime import datetime

app = FastAPI(title="Little Grow ML API")

# ‡πÄ‡∏û‡∏¥‡πà‡∏° CORS ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Flutter ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ö‡∏∏ origin ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠
try:
    scaler = joblib.load("scaler.pkl")
    encoders = joblib.load("encoders.pkl")
    model = joblib.load("rf_weight_height.pkl")
    print("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
except Exception as e:
    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•: {e}")
    print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå scaler.pkl, encoders.pkl, rf_weight_height.pkl ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô")
    model = None


class PredictionRequest(BaseModel):
    weight: float
    height: float
    birth_date: str
    measurement_date: str
    gender: str
    birth_weight: float = 3000
    breastfeeding_duration: int = 6


@app.get("/")
def root():
    return {
        "message": "Little Grow ML API",
        "model_loaded": model is not None,
        "version": "1.0.0",
    }


@app.get("/health")
def health_check():
    return {"status": "healthy", "model_loaded": model is not None}


@app.post("/predict")
async def predict(data: PredictionRequest):
    if model is None:
        raise HTTPException(
            status_code=503,
            detail="‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå .pkl"
        )

    try:
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        birth = datetime.fromisoformat(data.birth_date.replace("Z", "+00:00"))
        measurement = datetime.fromisoformat(
            data.measurement_date.replace("Z", "+00:00")
        )
        age_months = (measurement - birth).days / 30.44

        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•)
        features = {
            "Gender": 0 if data.gender.lower() == "male" else 1,
            "Age/month": age_months,
            "Birth Weight (grams)": data.birth_weight,
            "Weight (kg)": data.weight,
            "Height (cm)": data.height,
            "Pregnancy Complications": 0,
            "Breastfeeding Duration": data.breastfeeding_duration,
            "Birth Order": 1,
            "Father's Age": 30,
            "Mother's Age": 28,
            "Father's Occupation": 1,
            "Mother's Occupation": 1,
            "Father's Smoking Status": 0,
            "Mother's Smoking Status": 0,
            "Father's Alcohol Consumption": 0,
            "Mother's Alcohol Consumption": 0,
            "Father's Substance Use": 0,
            "Mother's Substance Use": 0,
            "Child's Living Situation": 1,
        }

        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DataFrame
        X = pd.DataFrame([features])

        # Encode categorical features (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        for col, encoder in encoders.items():
            if col in X.columns and X[col].dtype == "object":
                try:
                    X[col] = encoder.transform(X[col].astype(str))
                except Exception as e:
                    print(f"Warning: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ encode {col}: {e}")

        # Scale features
        X_scaled = scaler.transform(X)

        # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        prediction = int(model.predict(X_scaled)[0])
        probabilities = model.predict_proba(X_scaled)[0].tolist()

        # ‡πÅ‡∏°‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        status_map = {
            0: "‡∏ú‡∏≠‡∏°‡πÅ‡∏´‡πâ‡∏á",
            1: "‡∏ú‡∏≠‡∏°",
            2: "‡∏™‡∏°‡∏™‡πà‡∏ß‡∏ô",
            3: "‡∏ó‡πâ‡∏ß‡∏°",
            4: "‡∏≠‡πâ‡∏ß‡∏ô",
        }

        return {
            "success": True,
            "prediction": prediction,
            "status": status_map.get(prediction, "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö"),
            "probabilities": probabilities,
            "confidence": float(max(probabilities)),
            "age_months": round(age_months, 1),
        }

    except Exception as e:
        import traceback
        print(f"Error in predict: {traceback.format_exc()}")
        raise HTTPException(
            status_code=500,
            detail=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"
        )


if __name__ == "__main__":
    import uvicorn
    print("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå...")
    print("üìù ‡πÄ‡∏õ‡∏¥‡∏î http://127.0.0.1:8000/docs ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π API Documentation")